/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.formatting2;

import com.google.inject.Inject;
import de.schneidertim.requirements.nlp.reqLNG.Entity;
import de.schneidertim.requirements.nlp.reqLNG.Glossary;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.Requirement;
import de.schneidertim.requirements.nlp.reqLNG.RequirementDocument;
import de.schneidertim.requirements.nlp.services.ReqLNGGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class ReqLNGFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ReqLNGGrammarAccess _reqLNGGrammarAccess;
  
  protected void _format(final RequirementDocument requirementDocument, @Extension final IFormattableDocument document) {
    EList<Entity> _entities = requirementDocument.getEntities();
    for (final Entity entities : _entities) {
      {
        document.<Entity>format(entities);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(2);
        };
        document.<Entity>append(entities, _function);
      }
    }
    EList<Requirement> _requirement = requirementDocument.getRequirement();
    for (final Requirement requirement : _requirement) {
      document.<Requirement>format(requirement);
    }
    Glossary _glossary = requirementDocument.getGlossary();
    document.<Glossary>format(_glossary);
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Entity>interior(entity, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(entity);
    ISemanticRegion _feature = _regionFor.feature(ReqLNGPackage.Literals.ENTITY__NAME);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature, _function_1);
  }
  
  public void format(final Object entity, final IFormattableDocument document) {
    if (entity instanceof XtextResource) {
      _format((XtextResource)entity, document);
      return;
    } else if (entity instanceof Entity) {
      _format((Entity)entity, document);
      return;
    } else if (entity instanceof RequirementDocument) {
      _format((RequirementDocument)entity, document);
      return;
    } else if (entity instanceof EObject) {
      _format((EObject)entity, document);
      return;
    } else if (entity == null) {
      _format((Void)null, document);
      return;
    } else if (entity != null) {
      _format(entity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity, document).toString());
    }
  }
}
