/*
 * generated by Xtext 2.10.0
 */
grammar InternalReqLNG;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.schneidertim.requirements.nlp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.schneidertim.requirements.nlp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.schneidertim.requirements.nlp.services.ReqLNGGrammarAccess;

}

@parser::members {

 	private ReqLNGGrammarAccess grammarAccess;

    public InternalReqLNGParser(TokenStream input, ReqLNGGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RequirementDocument";
   	}

   	@Override
   	protected ReqLNGGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRequirementDocument
entryRuleRequirementDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementDocumentRule()); }
	iv_ruleRequirementDocument=ruleRequirementDocument
	{ $current=$iv_ruleRequirementDocument.current; }
	EOF;

// Rule RequirementDocument
ruleRequirementDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementDocumentAccess().getEntitiesEntityParserRuleCall_0_0_0());
					}
					lv_entities_0_0=ruleEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementDocumentRule());
						}
						add(
							$current,
							"entities",
							lv_entities_0_0,
							"de.schneidertim.requirements.nlp.ReqLNG.Entity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementDocumentAccess().getRequirementRequirementParserRuleCall_0_1_0());
					}
					lv_requirement_1_0=ruleRequirement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementDocumentRule());
						}
						add(
							$current,
							"requirement",
							lv_requirement_1_0,
							"de.schneidertim.requirements.nlp.ReqLNG.Requirement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementDocumentAccess().getGlossaryGlossaryParserRuleCall_1_0());
				}
				lv_glossary_2_0=ruleGlossary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementDocumentRule());
					}
					set(
						$current,
						"glossary",
						lv_glossary_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Glossary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntityAccess().getActorParserRuleCall_0());
		}
		this_Actor_0=ruleActor
		{
			$current = $this_Actor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getSystemParserRuleCall_1());
		}
		this_System_1=ruleSystem
		{
			$current = $this_System_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Actor'
		{
			newLeafNode(otherlv_0, grammarAccess.getActorAccess().getActorKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getActorAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getNameTextParserRuleCall_2_0());
				}
				lv_name_2_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getDescriptionDescriptionParserRuleCall_3_0());
				}
				lv_description_3_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"description",
						lv_description_3_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	iv_ruleSystem=ruleSystem
	{ $current=$iv_ruleSystem.current; }
	EOF;

// Rule System
ruleSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='System'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSystemAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getNameTextParserRuleCall_2_0());
				}
				lv_name_2_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemAccess().getDescriptionDescriptionParserRuleCall_3_0());
				}
				lv_description_3_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRule());
					}
					set(
						$current,
						"description",
						lv_description_3_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Description'
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getDescriptionKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDescriptionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDescriptionAccess().getTextSentenceWithReferencesParserRuleCall_2_0());
				}
				lv_text_2_0=ruleSentenceWithReferences
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDescriptionRule());
					}
					add(
						$current,
						"text",
						lv_text_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.SentenceWithReferences");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleText
entryRuleText returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current.getText(); }
	EOF;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='To'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getToKeyword_0());
		}
		    |
		kw='to'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getToKeyword_1());
		}
		    |
		kw='A'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getAKeyword_2());
		}
		    |
		kw='a'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getAKeyword_3());
		}
		    |
		kw='the'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getTheKeyword_4());
		}
		    |
		kw='The'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTextAccess().getTheKeyword_5());
		}
		    |
		this_WORD_6=RULE_WORD
		{
			$current.merge(this_WORD_6);
		}
		{
			newLeafNode(this_WORD_6, grammarAccess.getTextAccess().getWORDTerminalRuleCall_6());
		}
		    |
		this_ANY_OTHER_7=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_7);
		}
		{
			newLeafNode(this_ANY_OTHER_7, grammarAccess.getTextAccess().getANY_OTHERTerminalRuleCall_7());
		}
	)+
;

// Entry rule entryRuleSentenceWithReferences
entryRuleSentenceWithReferences returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceWithReferencesRule()); }
	iv_ruleSentenceWithReferences=ruleSentenceWithReferences
	{ $current=$iv_ruleSentenceWithReferences.current; }
	EOF;

// Rule SentenceWithReferences
ruleSentenceWithReferences returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceWithReferencesAccess().getTextWithReferencesTextWithReferencesParserRuleCall_0_0());
				}
				lv_textWithReferences_0_0=ruleTextWithReferences
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceWithReferencesRule());
					}
					set(
						$current,
						"textWithReferences",
						lv_textWithReferences_0_0,
						"de.schneidertim.requirements.nlp.ReqLNG.TextWithReferences");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_punctuation_1_1='.'
					{
						newLeafNode(lv_punctuation_1_1, grammarAccess.getSentenceWithReferencesAccess().getPunctuationFullStopKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSentenceWithReferencesRule());
						}
						setWithLastConsumed($current, "punctuation", lv_punctuation_1_1, null);
					}
					    |
					lv_punctuation_1_2='!'
					{
						newLeafNode(lv_punctuation_1_2, grammarAccess.getSentenceWithReferencesAccess().getPunctuationExclamationMarkKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSentenceWithReferencesRule());
						}
						setWithLastConsumed($current, "punctuation", lv_punctuation_1_2, null);
					}
					    |
					lv_punctuation_1_3='?'
					{
						newLeafNode(lv_punctuation_1_3, grammarAccess.getSentenceWithReferencesAccess().getPunctuationQuestionMarkKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSentenceWithReferencesRule());
						}
						setWithLastConsumed($current, "punctuation", lv_punctuation_1_3, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTextWithReferences
entryRuleTextWithReferences returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextWithReferencesRule()); }
	iv_ruleTextWithReferences=ruleTextWithReferences
	{ $current=$iv_ruleTextWithReferences.current; }
	EOF;

// Rule TextWithReferences
ruleTextWithReferences returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextWithReferencesRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getTextWithReferencesAccess().getOnlyRefsEntityCrossReference_0_0());
				}
			)
		)+
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTextWithReferencesRule());
						}
					}
					otherlv_1=RULE_STRING
					{
						newLeafNode(otherlv_1, grammarAccess.getTextWithReferencesAccess().getRefBeforeEntityCrossReference_1_0_0());
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getTextWithReferencesAccess().getTextTextParserRuleCall_1_1_0());
					}
					lv_text_2_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextWithReferencesRule());
						}
						add(
							$current,
							"text",
							lv_text_2_0,
							"de.schneidertim.requirements.nlp.ReqLNG.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTextWithReferencesAccess().getAfterReferenceCombinationParserRuleCall_1_2_0());
					}
					lv_after_3_0=ruleReferenceCombination
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextWithReferencesRule());
						}
						add(
							$current,
							"after",
							lv_after_3_0,
							"de.schneidertim.requirements.nlp.ReqLNG.ReferenceCombination");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTextWithReferencesRule());
						}
					}
					otherlv_4=RULE_STRING
					{
						newLeafNode(otherlv_4, grammarAccess.getTextWithReferencesAccess().getFinalRefEntityCrossReference_1_3_0());
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleReferenceCombination
entryRuleReferenceCombination returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceCombinationRule()); }
	iv_ruleReferenceCombination=ruleReferenceCombination
	{ $current=$iv_ruleReferenceCombination.current; }
	EOF;

// Rule ReferenceCombination
ruleReferenceCombination returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceCombinationRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getReferenceCombinationAccess().getRefsEntityCrossReference_0_0());
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceCombinationAccess().getTextTextParserRuleCall_1_0());
				}
				lv_text_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceCombinationRule());
					}
					add(
						$current,
						"text",
						lv_text_1_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRequirementAccess().getConditionalRequirementParserRuleCall_0());
		}
		this_ConditionalRequirement_0=ruleConditionalRequirement
		{
			$current = $this_ConditionalRequirement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRequirementAccess().getUnconditionalRequirementParserRuleCall_1());
		}
		this_UnconditionalRequirement_1=ruleUnconditionalRequirement
		{
			$current = $this_UnconditionalRequirement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalRequirement
entryRuleConditionalRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRequirementRule()); }
	iv_ruleConditionalRequirement=ruleConditionalRequirement
	{ $current=$iv_ruleConditionalRequirement.current; }
	EOF;

// Rule ConditionalRequirement
ruleConditionalRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRequirementAccess().getConditionPreconditionParserRuleCall_0_0());
				}
				lv_condition_0_0=rulePrecondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRequirementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_0_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Precondition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRequirementRule());
					}
				}
				otherlv_1=RULE_STRING
				{
					newLeafNode(otherlv_1, grammarAccess.getConditionalRequirementAccess().getSystemSystemCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRequirementAccess().getLiabilityLiabilityEnumRuleCall_2_0());
				}
				lv_liability_2_0=ruleLiability
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRequirementRule());
					}
					set(
						$current,
						"liability",
						lv_liability_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Liability");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRequirementAccess().getEndRequirementEndParserRuleCall_3_0());
				}
				lv_end_3_0=ruleRequirementEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRequirementRule());
					}
					set(
						$current,
						"end",
						lv_end_3_0,
						"de.schneidertim.requirements.nlp.ReqLNG.RequirementEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnconditionalRequirement
entryRuleUnconditionalRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnconditionalRequirementRule()); }
	iv_ruleUnconditionalRequirement=ruleUnconditionalRequirement
	{ $current=$iv_ruleUnconditionalRequirement.current; }
	EOF;

// Rule UnconditionalRequirement
ruleUnconditionalRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_the_0_0='The'
				{
					newLeafNode(lv_the_0_0, grammarAccess.getUnconditionalRequirementAccess().getTheTheKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnconditionalRequirementRule());
					}
					setWithLastConsumed($current, "the", lv_the_0_0, "The");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnconditionalRequirementRule());
					}
				}
				otherlv_1=RULE_STRING
				{
					newLeafNode(otherlv_1, grammarAccess.getUnconditionalRequirementAccess().getSystemSystemCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnconditionalRequirementAccess().getLiabilityLiabilityEnumRuleCall_2_0());
				}
				lv_liability_2_0=ruleLiability
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnconditionalRequirementRule());
					}
					set(
						$current,
						"liability",
						lv_liability_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Liability");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnconditionalRequirementAccess().getEndRequirementEndParserRuleCall_3_0());
				}
				lv_end_3_0=ruleRequirementEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnconditionalRequirementRule());
					}
					set(
						$current,
						"end",
						lv_end_3_0,
						"de.schneidertim.requirements.nlp.ReqLNG.RequirementEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrecondition
entryRulePrecondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreconditionRule()); }
	iv_rulePrecondition=rulePrecondition
	{ $current=$iv_rulePrecondition.current; }
	EOF;

// Rule Precondition
rulePrecondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getConditionalConditionalParserRuleCall_0_0());
				}
				lv_conditional_0_0=ruleConditional
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"conditional",
						lv_conditional_0_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Conditional");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPreconditionAccess().getConditionTextWithReferencesParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleTextWithReferences
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreconditionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"de.schneidertim.requirements.nlp.ReqLNG.TextWithReferences");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current.getText(); }
	EOF;

// Rule Conditional
ruleConditional returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='If'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getConditionalAccess().getIfKeyword());
	}
;

// Entry rule entryRuleActorInteraction
entryRuleActorInteraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorInteractionRule()); }
	iv_ruleActorInteraction=ruleActorInteraction
	{ $current=$iv_ruleActorInteraction.current; }
	EOF;

// Rule ActorInteraction
ruleActorInteraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_provide_0_0='provide'
				{
					newLeafNode(lv_provide_0_0, grammarAccess.getActorInteractionAccess().getProvideProvideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "provide", lv_provide_0_0, "provide");
				}
			)
		)
		(
			(
				lv_the1_1_0='the'
				{
					newLeafNode(lv_the1_1_0, grammarAccess.getActorInteractionAccess().getThe1TheKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "the1", lv_the1_1_0, "the");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
				}
				otherlv_2=RULE_STRING
				{
					newLeafNode(otherlv_2, grammarAccess.getActorInteractionAccess().getActorActorCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_with_3_0='with'
				{
					newLeafNode(lv_with_3_0, grammarAccess.getActorInteractionAccess().getWithWithKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "with", lv_with_3_0, "with");
				}
			)
		)
		(
			(
				lv_the2_4_0='the'
				{
					newLeafNode(lv_the2_4_0, grammarAccess.getActorInteractionAccess().getThe2TheKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "the2", lv_the2_4_0, "the");
				}
			)
		)
		(
			(
				lv_ability_5_0='ability'
				{
					newLeafNode(lv_ability_5_0, grammarAccess.getActorInteractionAccess().getAbilityAbilityKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "ability", lv_ability_5_0, "ability");
				}
			)
		)
		(
			(
				lv_to_6_0='to'
				{
					newLeafNode(lv_to_6_0, grammarAccess.getActorInteractionAccess().getToToKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorInteractionRule());
					}
					setWithLastConsumed($current, "to", lv_to_6_0, "to");
				}
			)
		)
	)
;

// Entry rule entryRuleRequirementEnd
entryRuleRequirementEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementEndRule()); }
	iv_ruleRequirementEnd=ruleRequirementEnd
	{ $current=$iv_ruleRequirementEnd.current; }
	EOF;

// Rule RequirementEnd
ruleRequirementEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementEndAccess().getAiActorInteractionParserRuleCall_0_0());
				}
				lv_ai_0_0=ruleActorInteraction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementEndRule());
					}
					set(
						$current,
						"ai",
						lv_ai_0_0,
						"de.schneidertim.requirements.nlp.ReqLNG.ActorInteraction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementEndAccess().getObjectWithDetailsTextWithConceptsOrSynonymsParserRuleCall_1_0());
				}
				lv_objectWithDetails_1_0=ruleTextWithConceptsOrSynonyms
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementEndRule());
					}
					set(
						$current,
						"objectWithDetails",
						lv_objectWithDetails_1_0,
						"de.schneidertim.requirements.nlp.ReqLNG.TextWithConceptsOrSynonyms");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequirementEndAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleTextWithConceptsOrSynonyms
entryRuleTextWithConceptsOrSynonyms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextWithConceptsOrSynonymsRule()); }
	iv_ruleTextWithConceptsOrSynonyms=ruleTextWithConceptsOrSynonyms
	{ $current=$iv_ruleTextWithConceptsOrSynonyms.current; }
	EOF;

// Rule TextWithConceptsOrSynonyms
ruleTextWithConceptsOrSynonyms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextWithConceptsOrSynonymsRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getTextWithConceptsOrSynonymsAccess().getOnlyRefsConceptOrSynonymCrossReference_0_0());
				}
			)
		)+
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTextWithConceptsOrSynonymsRule());
						}
					}
					otherlv_1=RULE_STRING
					{
						newLeafNode(otherlv_1, grammarAccess.getTextWithConceptsOrSynonymsAccess().getRefBeforeConceptOrSynonymCrossReference_1_0_0());
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getTextWithConceptsOrSynonymsAccess().getTextTextParserRuleCall_1_1_0());
					}
					lv_text_2_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextWithConceptsOrSynonymsRule());
						}
						add(
							$current,
							"text",
							lv_text_2_0,
							"de.schneidertim.requirements.nlp.ReqLNG.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTextWithConceptsOrSynonymsAccess().getAfterConceptCombinationParserRuleCall_1_2_0());
					}
					lv_after_3_0=ruleConceptCombination
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextWithConceptsOrSynonymsRule());
						}
						add(
							$current,
							"after",
							lv_after_3_0,
							"de.schneidertim.requirements.nlp.ReqLNG.ConceptCombination");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTextWithConceptsOrSynonymsRule());
						}
					}
					otherlv_4=RULE_STRING
					{
						newLeafNode(otherlv_4, grammarAccess.getTextWithConceptsOrSynonymsAccess().getFinalRefConceptOrSynonymCrossReference_1_3_0());
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleConceptCombination
entryRuleConceptCombination returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptCombinationRule()); }
	iv_ruleConceptCombination=ruleConceptCombination
	{ $current=$iv_ruleConceptCombination.current; }
	EOF;

// Rule ConceptCombination
ruleConceptCombination returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptCombinationRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getConceptCombinationAccess().getConceptsConceptOrSynonymCrossReference_0_0());
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptCombinationAccess().getTextTextParserRuleCall_1_0());
				}
				lv_text_1_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptCombinationRule());
					}
					add(
						$current,
						"text",
						lv_text_1_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGlossary
entryRuleGlossary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlossaryRule()); }
	iv_ruleGlossary=ruleGlossary
	{ $current=$iv_ruleGlossary.current; }
	EOF;

// Rule Glossary
ruleGlossary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGlossaryAccess().getGlossaryAction_0(),
					$current);
			}
		)
		otherlv_1='Glossary'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlossaryAccess().getGlossaryKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGlossaryAccess().getConceptsConceptParserRuleCall_2_0());
				}
				lv_concepts_2_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlossaryRule());
					}
					add(
						$current,
						"concepts",
						lv_concepts_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	iv_ruleConcept=ruleConcept
	{ $current=$iv_ruleConcept.current; }
	EOF;

// Rule Concept
ruleConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConceptAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current = $this_Function_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConceptAccess().getDomainObjectParserRuleCall_1());
		}
		this_DomainObject_1=ruleDomainObject
		{
			$current = $this_DomainObject_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getNameTextParserRuleCall_2_0());
				}
				lv_name_2_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='Synonyms'
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getSynonymsKeyword_3_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getSynonymsFunctionSynonymParserRuleCall_3_2_0());
					}
					lv_synonyms_5_0=ruleFunctionSynonym
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"synonyms",
							lv_synonyms_5_0,
							"de.schneidertim.requirements.nlp.ReqLNG.FunctionSynonym");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getSynonymsFunctionSynonymParserRuleCall_3_3_1_0());
						}
						lv_synonyms_7_0=ruleFunctionSynonym
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"synonyms",
								lv_synonyms_7_0,
								"de.schneidertim.requirements.nlp.ReqLNG.FunctionSynonym");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='Description'
			{
				newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getDescriptionKeyword_4_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getDescriptionSentenceWithReferencesParserRuleCall_4_2_0());
					}
					lv_description_10_0=ruleSentenceWithReferences
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"description",
							lv_description_10_0,
							"de.schneidertim.requirements.nlp.ReqLNG.SentenceWithReferences");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleDomainObject
entryRuleDomainObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainObjectRule()); }
	iv_ruleDomainObject=ruleDomainObject
	{ $current=$iv_ruleDomainObject.current; }
	EOF;

// Rule DomainObject
ruleDomainObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Object'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainObjectAccess().getObjectKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDomainObjectAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainObjectAccess().getNameTextParserRuleCall_2_0());
				}
				lv_name_2_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainObjectRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.schneidertim.requirements.nlp.ReqLNG.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='Synonyms'
			{
				newLeafNode(otherlv_3, grammarAccess.getDomainObjectAccess().getSynonymsKeyword_3_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getDomainObjectAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainObjectAccess().getSynonymsDomainObjectSynonymParserRuleCall_3_2_0());
					}
					lv_synonyms_5_0=ruleDomainObjectSynonym
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainObjectRule());
						}
						add(
							$current,
							"synonyms",
							lv_synonyms_5_0,
							"de.schneidertim.requirements.nlp.ReqLNG.DomainObjectSynonym");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDomainObjectAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDomainObjectAccess().getSynonymsDomainObjectSynonymParserRuleCall_3_3_1_0());
						}
						lv_synonyms_7_0=ruleDomainObjectSynonym
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDomainObjectRule());
							}
							add(
								$current,
								"synonyms",
								lv_synonyms_7_0,
								"de.schneidertim.requirements.nlp.ReqLNG.DomainObjectSynonym");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='Description'
			{
				newLeafNode(otherlv_8, grammarAccess.getDomainObjectAccess().getDescriptionKeyword_4_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getDomainObjectAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainObjectAccess().getDescriptionSentenceWithReferencesParserRuleCall_4_2_0());
					}
					lv_description_10_0=ruleSentenceWithReferences
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainObjectRule());
						}
						add(
							$current,
							"description",
							lv_description_10_0,
							"de.schneidertim.requirements.nlp.ReqLNG.SentenceWithReferences");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleFunctionSynonym
entryRuleFunctionSynonym returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionSynonymRule()); }
	iv_ruleFunctionSynonym=ruleFunctionSynonym
	{ $current=$iv_ruleFunctionSynonym.current; }
	EOF;

// Rule FunctionSynonym
ruleFunctionSynonym returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunctionSynonymAccess().getNameTextParserRuleCall_0());
			}
			lv_name_0_0=ruleText
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFunctionSynonymRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"de.schneidertim.requirements.nlp.ReqLNG.Text");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDomainObjectSynonym
entryRuleDomainObjectSynonym returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainObjectSynonymRule()); }
	iv_ruleDomainObjectSynonym=ruleDomainObjectSynonym
	{ $current=$iv_ruleDomainObjectSynonym.current; }
	EOF;

// Rule DomainObjectSynonym
ruleDomainObjectSynonym returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainObjectSynonymAccess().getNameTextParserRuleCall_0());
			}
			lv_name_0_0=ruleText
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainObjectSynonymRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"de.schneidertim.requirements.nlp.ReqLNG.Text");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule Liability
ruleLiability returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='shall'
			{
				$current = grammarAccess.getLiabilityAccess().getShallEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLiabilityAccess().getShallEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='should'
			{
				$current = grammarAccess.getLiabilityAccess().getShouldEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLiabilityAccess().getShouldEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='will'
			{
				$current = grammarAccess.getLiabilityAccess().getWillEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLiabilityAccess().getWillEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_WORD : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
