/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.reqLNG.impl;

import de.schneidertim.requirements.nlp.reqLNG.Actor;
import de.schneidertim.requirements.nlp.reqLNG.ActorInteraction;
import de.schneidertim.requirements.nlp.reqLNG.ConceptCombination;
import de.schneidertim.requirements.nlp.reqLNG.ConceptOrSynonym;
import de.schneidertim.requirements.nlp.reqLNG.ConditionalRequirement;
import de.schneidertim.requirements.nlp.reqLNG.Description;
import de.schneidertim.requirements.nlp.reqLNG.DomainObject;
import de.schneidertim.requirements.nlp.reqLNG.DomainObjectSynonym;
import de.schneidertim.requirements.nlp.reqLNG.Entity;
import de.schneidertim.requirements.nlp.reqLNG.Function;
import de.schneidertim.requirements.nlp.reqLNG.FunctionSynonym;
import de.schneidertim.requirements.nlp.reqLNG.Glossary;
import de.schneidertim.requirements.nlp.reqLNG.Liability;
import de.schneidertim.requirements.nlp.reqLNG.Precondition;
import de.schneidertim.requirements.nlp.reqLNG.ReferenceCombination;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGFactory;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.Requirement;
import de.schneidertim.requirements.nlp.reqLNG.RequirementDocument;
import de.schneidertim.requirements.nlp.reqLNG.RequirementEnd;
import de.schneidertim.requirements.nlp.reqLNG.SentenceWithReferences;
import de.schneidertim.requirements.nlp.reqLNG.TextWithConceptsOrSynonyms;
import de.schneidertim.requirements.nlp.reqLNG.TextWithReferences;
import de.schneidertim.requirements.nlp.reqLNG.UnconditionalRequirement;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReqLNGFactoryImpl extends EFactoryImpl implements ReqLNGFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReqLNGFactory init()
  {
    try
    {
      ReqLNGFactory theReqLNGFactory = (ReqLNGFactory)EPackage.Registry.INSTANCE.getEFactory(ReqLNGPackage.eNS_URI);
      if (theReqLNGFactory != null)
      {
        return theReqLNGFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReqLNGFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqLNGFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReqLNGPackage.REQUIREMENT_DOCUMENT: return createRequirementDocument();
      case ReqLNGPackage.ENTITY: return createEntity();
      case ReqLNGPackage.ACTOR: return createActor();
      case ReqLNGPackage.SYSTEM: return createSystem();
      case ReqLNGPackage.DESCRIPTION: return createDescription();
      case ReqLNGPackage.SENTENCE_WITH_REFERENCES: return createSentenceWithReferences();
      case ReqLNGPackage.TEXT_WITH_REFERENCES: return createTextWithReferences();
      case ReqLNGPackage.REFERENCE_COMBINATION: return createReferenceCombination();
      case ReqLNGPackage.REQUIREMENT: return createRequirement();
      case ReqLNGPackage.CONDITIONAL_REQUIREMENT: return createConditionalRequirement();
      case ReqLNGPackage.UNCONDITIONAL_REQUIREMENT: return createUnconditionalRequirement();
      case ReqLNGPackage.PRECONDITION: return createPrecondition();
      case ReqLNGPackage.ACTOR_INTERACTION: return createActorInteraction();
      case ReqLNGPackage.REQUIREMENT_END: return createRequirementEnd();
      case ReqLNGPackage.TEXT_WITH_CONCEPTS_OR_SYNONYMS: return createTextWithConceptsOrSynonyms();
      case ReqLNGPackage.CONCEPT_COMBINATION: return createConceptCombination();
      case ReqLNGPackage.GLOSSARY: return createGlossary();
      case ReqLNGPackage.CONCEPT_OR_SYNONYM: return createConceptOrSynonym();
      case ReqLNGPackage.FUNCTION: return createFunction();
      case ReqLNGPackage.DOMAIN_OBJECT: return createDomainObject();
      case ReqLNGPackage.FUNCTION_SYNONYM: return createFunctionSynonym();
      case ReqLNGPackage.DOMAIN_OBJECT_SYNONYM: return createDomainObjectSynonym();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReqLNGPackage.LIABILITY:
        return createLiabilityFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReqLNGPackage.LIABILITY:
        return convertLiabilityToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementDocument createRequirementDocument()
  {
    RequirementDocumentImpl requirementDocument = new RequirementDocumentImpl();
    return requirementDocument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Actor createActor()
  {
    ActorImpl actor = new ActorImpl();
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.schneidertim.requirements.nlp.reqLNG.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Description createDescription()
  {
    DescriptionImpl description = new DescriptionImpl();
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SentenceWithReferences createSentenceWithReferences()
  {
    SentenceWithReferencesImpl sentenceWithReferences = new SentenceWithReferencesImpl();
    return sentenceWithReferences;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextWithReferences createTextWithReferences()
  {
    TextWithReferencesImpl textWithReferences = new TextWithReferencesImpl();
    return textWithReferences;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceCombination createReferenceCombination()
  {
    ReferenceCombinationImpl referenceCombination = new ReferenceCombinationImpl();
    return referenceCombination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalRequirement createConditionalRequirement()
  {
    ConditionalRequirementImpl conditionalRequirement = new ConditionalRequirementImpl();
    return conditionalRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnconditionalRequirement createUnconditionalRequirement()
  {
    UnconditionalRequirementImpl unconditionalRequirement = new UnconditionalRequirementImpl();
    return unconditionalRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActorInteraction createActorInteraction()
  {
    ActorInteractionImpl actorInteraction = new ActorInteractionImpl();
    return actorInteraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementEnd createRequirementEnd()
  {
    RequirementEndImpl requirementEnd = new RequirementEndImpl();
    return requirementEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextWithConceptsOrSynonyms createTextWithConceptsOrSynonyms()
  {
    TextWithConceptsOrSynonymsImpl textWithConceptsOrSynonyms = new TextWithConceptsOrSynonymsImpl();
    return textWithConceptsOrSynonyms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptCombination createConceptCombination()
  {
    ConceptCombinationImpl conceptCombination = new ConceptCombinationImpl();
    return conceptCombination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Glossary createGlossary()
  {
    GlossaryImpl glossary = new GlossaryImpl();
    return glossary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptOrSynonym createConceptOrSynonym()
  {
    ConceptOrSynonymImpl conceptOrSynonym = new ConceptOrSynonymImpl();
    return conceptOrSynonym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainObject createDomainObject()
  {
    DomainObjectImpl domainObject = new DomainObjectImpl();
    return domainObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionSynonym createFunctionSynonym()
  {
    FunctionSynonymImpl functionSynonym = new FunctionSynonymImpl();
    return functionSynonym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainObjectSynonym createDomainObjectSynonym()
  {
    DomainObjectSynonymImpl domainObjectSynonym = new DomainObjectSynonymImpl();
    return domainObjectSynonym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Liability createLiabilityFromString(EDataType eDataType, String initialValue)
  {
    Liability result = Liability.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLiabilityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqLNGPackage getReqLNGPackage()
  {
    return (ReqLNGPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReqLNGPackage getPackage()
  {
    return ReqLNGPackage.eINSTANCE;
  }

} //ReqLNGFactoryImpl
