/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.reqLNG.impl;

import de.schneidertim.requirements.nlp.reqLNG.Liability;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.Requirement;
import de.schneidertim.requirements.nlp.reqLNG.RequirementEnd;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Requirement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.RequirementImpl#getSystem <em>System</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.RequirementImpl#getLiability <em>Liability</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.RequirementImpl#getEnd <em>End</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequirementImpl extends MinimalEObjectImpl.Container implements Requirement
{
  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected de.schneidertim.requirements.nlp.reqLNG.System system;

  /**
   * The default value of the '{@link #getLiability() <em>Liability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiability()
   * @generated
   * @ordered
   */
  protected static final Liability LIABILITY_EDEFAULT = Liability.SHALL;

  /**
   * The cached value of the '{@link #getLiability() <em>Liability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiability()
   * @generated
   * @ordered
   */
  protected Liability liability = LIABILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnd() <em>End</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected RequirementEnd end;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequirementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReqLNGPackage.Literals.REQUIREMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.schneidertim.requirements.nlp.reqLNG.System getSystem()
  {
    if (system != null && system.eIsProxy())
    {
      InternalEObject oldSystem = (InternalEObject)system;
      system = (de.schneidertim.requirements.nlp.reqLNG.System)eResolveProxy(oldSystem);
      if (system != oldSystem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReqLNGPackage.REQUIREMENT__SYSTEM, oldSystem, system));
      }
    }
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.schneidertim.requirements.nlp.reqLNG.System basicGetSystem()
  {
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSystem(de.schneidertim.requirements.nlp.reqLNG.System newSystem)
  {
    de.schneidertim.requirements.nlp.reqLNG.System oldSystem = system;
    system = newSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReqLNGPackage.REQUIREMENT__SYSTEM, oldSystem, system));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Liability getLiability()
  {
    return liability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLiability(Liability newLiability)
  {
    Liability oldLiability = liability;
    liability = newLiability == null ? LIABILITY_EDEFAULT : newLiability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReqLNGPackage.REQUIREMENT__LIABILITY, oldLiability, liability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequirementEnd getEnd()
  {
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnd(RequirementEnd newEnd, NotificationChain msgs)
  {
    RequirementEnd oldEnd = end;
    end = newEnd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReqLNGPackage.REQUIREMENT__END, oldEnd, newEnd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnd(RequirementEnd newEnd)
  {
    if (newEnd != end)
    {
      NotificationChain msgs = null;
      if (end != null)
        msgs = ((InternalEObject)end).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReqLNGPackage.REQUIREMENT__END, null, msgs);
      if (newEnd != null)
        msgs = ((InternalEObject)newEnd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReqLNGPackage.REQUIREMENT__END, null, msgs);
      msgs = basicSetEnd(newEnd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReqLNGPackage.REQUIREMENT__END, newEnd, newEnd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReqLNGPackage.REQUIREMENT__END:
        return basicSetEnd(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReqLNGPackage.REQUIREMENT__SYSTEM:
        if (resolve) return getSystem();
        return basicGetSystem();
      case ReqLNGPackage.REQUIREMENT__LIABILITY:
        return getLiability();
      case ReqLNGPackage.REQUIREMENT__END:
        return getEnd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReqLNGPackage.REQUIREMENT__SYSTEM:
        setSystem((de.schneidertim.requirements.nlp.reqLNG.System)newValue);
        return;
      case ReqLNGPackage.REQUIREMENT__LIABILITY:
        setLiability((Liability)newValue);
        return;
      case ReqLNGPackage.REQUIREMENT__END:
        setEnd((RequirementEnd)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.REQUIREMENT__SYSTEM:
        setSystem((de.schneidertim.requirements.nlp.reqLNG.System)null);
        return;
      case ReqLNGPackage.REQUIREMENT__LIABILITY:
        setLiability(LIABILITY_EDEFAULT);
        return;
      case ReqLNGPackage.REQUIREMENT__END:
        setEnd((RequirementEnd)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.REQUIREMENT__SYSTEM:
        return system != null;
      case ReqLNGPackage.REQUIREMENT__LIABILITY:
        return liability != LIABILITY_EDEFAULT;
      case ReqLNGPackage.REQUIREMENT__END:
        return end != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (liability: ");
    result.append(liability);
    result.append(')');
    return result.toString();
  }

} //RequirementImpl
