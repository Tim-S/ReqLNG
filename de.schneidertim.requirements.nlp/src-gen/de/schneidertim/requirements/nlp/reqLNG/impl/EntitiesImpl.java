/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.reqLNG.impl;

import de.schneidertim.requirements.nlp.reqLNG.Actor;
import de.schneidertim.requirements.nlp.reqLNG.Entities;
import de.schneidertim.requirements.nlp.reqLNG.Glossary;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.Requirement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entities</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.EntitiesImpl#getActor <em>Actor</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.EntitiesImpl#getSystem <em>System</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.EntitiesImpl#getRequirement <em>Requirement</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.EntitiesImpl#getGlossary <em>Glossary</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntitiesImpl extends MinimalEObjectImpl.Container implements Entities
{
  /**
   * The cached value of the '{@link #getActor() <em>Actor</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActor()
   * @generated
   * @ordered
   */
  protected EList<Actor> actor;

  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected EList<de.schneidertim.requirements.nlp.reqLNG.System> system;

  /**
   * The cached value of the '{@link #getRequirement() <em>Requirement</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequirement()
   * @generated
   * @ordered
   */
  protected EList<Requirement> requirement;

  /**
   * The cached value of the '{@link #getGlossary() <em>Glossary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlossary()
   * @generated
   * @ordered
   */
  protected Glossary glossary;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntitiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReqLNGPackage.Literals.ENTITIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Actor> getActor()
  {
    if (actor == null)
    {
      actor = new EObjectContainmentEList<Actor>(Actor.class, this, ReqLNGPackage.ENTITIES__ACTOR);
    }
    return actor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<de.schneidertim.requirements.nlp.reqLNG.System> getSystem()
  {
    if (system == null)
    {
      system = new EObjectContainmentEList<de.schneidertim.requirements.nlp.reqLNG.System>(de.schneidertim.requirements.nlp.reqLNG.System.class, this, ReqLNGPackage.ENTITIES__SYSTEM);
    }
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Requirement> getRequirement()
  {
    if (requirement == null)
    {
      requirement = new EObjectContainmentEList<Requirement>(Requirement.class, this, ReqLNGPackage.ENTITIES__REQUIREMENT);
    }
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Glossary getGlossary()
  {
    return glossary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlossary(Glossary newGlossary, NotificationChain msgs)
  {
    Glossary oldGlossary = glossary;
    glossary = newGlossary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReqLNGPackage.ENTITIES__GLOSSARY, oldGlossary, newGlossary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGlossary(Glossary newGlossary)
  {
    if (newGlossary != glossary)
    {
      NotificationChain msgs = null;
      if (glossary != null)
        msgs = ((InternalEObject)glossary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReqLNGPackage.ENTITIES__GLOSSARY, null, msgs);
      if (newGlossary != null)
        msgs = ((InternalEObject)newGlossary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReqLNGPackage.ENTITIES__GLOSSARY, null, msgs);
      msgs = basicSetGlossary(newGlossary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReqLNGPackage.ENTITIES__GLOSSARY, newGlossary, newGlossary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReqLNGPackage.ENTITIES__ACTOR:
        return ((InternalEList<?>)getActor()).basicRemove(otherEnd, msgs);
      case ReqLNGPackage.ENTITIES__SYSTEM:
        return ((InternalEList<?>)getSystem()).basicRemove(otherEnd, msgs);
      case ReqLNGPackage.ENTITIES__REQUIREMENT:
        return ((InternalEList<?>)getRequirement()).basicRemove(otherEnd, msgs);
      case ReqLNGPackage.ENTITIES__GLOSSARY:
        return basicSetGlossary(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReqLNGPackage.ENTITIES__ACTOR:
        return getActor();
      case ReqLNGPackage.ENTITIES__SYSTEM:
        return getSystem();
      case ReqLNGPackage.ENTITIES__REQUIREMENT:
        return getRequirement();
      case ReqLNGPackage.ENTITIES__GLOSSARY:
        return getGlossary();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReqLNGPackage.ENTITIES__ACTOR:
        getActor().clear();
        getActor().addAll((Collection<? extends Actor>)newValue);
        return;
      case ReqLNGPackage.ENTITIES__SYSTEM:
        getSystem().clear();
        getSystem().addAll((Collection<? extends de.schneidertim.requirements.nlp.reqLNG.System>)newValue);
        return;
      case ReqLNGPackage.ENTITIES__REQUIREMENT:
        getRequirement().clear();
        getRequirement().addAll((Collection<? extends Requirement>)newValue);
        return;
      case ReqLNGPackage.ENTITIES__GLOSSARY:
        setGlossary((Glossary)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.ENTITIES__ACTOR:
        getActor().clear();
        return;
      case ReqLNGPackage.ENTITIES__SYSTEM:
        getSystem().clear();
        return;
      case ReqLNGPackage.ENTITIES__REQUIREMENT:
        getRequirement().clear();
        return;
      case ReqLNGPackage.ENTITIES__GLOSSARY:
        setGlossary((Glossary)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.ENTITIES__ACTOR:
        return actor != null && !actor.isEmpty();
      case ReqLNGPackage.ENTITIES__SYSTEM:
        return system != null && !system.isEmpty();
      case ReqLNGPackage.ENTITIES__REQUIREMENT:
        return requirement != null && !requirement.isEmpty();
      case ReqLNGPackage.ENTITIES__GLOSSARY:
        return glossary != null;
    }
    return super.eIsSet(featureID);
  }

} //EntitiesImpl
