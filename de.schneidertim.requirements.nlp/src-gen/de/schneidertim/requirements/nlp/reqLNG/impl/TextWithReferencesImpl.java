/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.reqLNG.impl;

import de.schneidertim.requirements.nlp.reqLNG.Entity;
import de.schneidertim.requirements.nlp.reqLNG.ReferenceCombination;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.TextWithReferences;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Text With References</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.TextWithReferencesImpl#getOnlyRefs <em>Only Refs</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.TextWithReferencesImpl#getRefBefore <em>Ref Before</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.TextWithReferencesImpl#getText <em>Text</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.TextWithReferencesImpl#getAfter <em>After</em>}</li>
 *   <li>{@link de.schneidertim.requirements.nlp.reqLNG.impl.TextWithReferencesImpl#getFinalRef <em>Final Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TextWithReferencesImpl extends MinimalEObjectImpl.Container implements TextWithReferences
{
  /**
   * The cached value of the '{@link #getOnlyRefs() <em>Only Refs</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnlyRefs()
   * @generated
   * @ordered
   */
  protected EList<Entity> onlyRefs;

  /**
   * The cached value of the '{@link #getRefBefore() <em>Ref Before</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefBefore()
   * @generated
   * @ordered
   */
  protected EList<Entity> refBefore;

  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected EList<String> text;

  /**
   * The cached value of the '{@link #getAfter() <em>After</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfter()
   * @generated
   * @ordered
   */
  protected EList<ReferenceCombination> after;

  /**
   * The cached value of the '{@link #getFinalRef() <em>Final Ref</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFinalRef()
   * @generated
   * @ordered
   */
  protected EList<Entity> finalRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextWithReferencesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReqLNGPackage.Literals.TEXT_WITH_REFERENCES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Entity> getOnlyRefs()
  {
    if (onlyRefs == null)
    {
      onlyRefs = new EObjectResolvingEList<Entity>(Entity.class, this, ReqLNGPackage.TEXT_WITH_REFERENCES__ONLY_REFS);
    }
    return onlyRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Entity> getRefBefore()
  {
    if (refBefore == null)
    {
      refBefore = new EObjectResolvingEList<Entity>(Entity.class, this, ReqLNGPackage.TEXT_WITH_REFERENCES__REF_BEFORE);
    }
    return refBefore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getText()
  {
    if (text == null)
    {
      text = new EDataTypeEList<String>(String.class, this, ReqLNGPackage.TEXT_WITH_REFERENCES__TEXT);
    }
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ReferenceCombination> getAfter()
  {
    if (after == null)
    {
      after = new EObjectContainmentEList<ReferenceCombination>(ReferenceCombination.class, this, ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER);
    }
    return after;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Entity> getFinalRef()
  {
    if (finalRef == null)
    {
      finalRef = new EObjectResolvingEList<Entity>(Entity.class, this, ReqLNGPackage.TEXT_WITH_REFERENCES__FINAL_REF);
    }
    return finalRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER:
        return ((InternalEList<?>)getAfter()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReqLNGPackage.TEXT_WITH_REFERENCES__ONLY_REFS:
        return getOnlyRefs();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__REF_BEFORE:
        return getRefBefore();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__TEXT:
        return getText();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER:
        return getAfter();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__FINAL_REF:
        return getFinalRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReqLNGPackage.TEXT_WITH_REFERENCES__ONLY_REFS:
        getOnlyRefs().clear();
        getOnlyRefs().addAll((Collection<? extends Entity>)newValue);
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__REF_BEFORE:
        getRefBefore().clear();
        getRefBefore().addAll((Collection<? extends Entity>)newValue);
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__TEXT:
        getText().clear();
        getText().addAll((Collection<? extends String>)newValue);
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER:
        getAfter().clear();
        getAfter().addAll((Collection<? extends ReferenceCombination>)newValue);
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__FINAL_REF:
        getFinalRef().clear();
        getFinalRef().addAll((Collection<? extends Entity>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.TEXT_WITH_REFERENCES__ONLY_REFS:
        getOnlyRefs().clear();
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__REF_BEFORE:
        getRefBefore().clear();
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__TEXT:
        getText().clear();
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER:
        getAfter().clear();
        return;
      case ReqLNGPackage.TEXT_WITH_REFERENCES__FINAL_REF:
        getFinalRef().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReqLNGPackage.TEXT_WITH_REFERENCES__ONLY_REFS:
        return onlyRefs != null && !onlyRefs.isEmpty();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__REF_BEFORE:
        return refBefore != null && !refBefore.isEmpty();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__TEXT:
        return text != null && !text.isEmpty();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__AFTER:
        return after != null && !after.isEmpty();
      case ReqLNGPackage.TEXT_WITH_REFERENCES__FINAL_REF:
        return finalRef != null && !finalRef.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (text: ");
    result.append(text);
    result.append(')');
    return result.toString();
  }

} //TextWithReferencesImpl
