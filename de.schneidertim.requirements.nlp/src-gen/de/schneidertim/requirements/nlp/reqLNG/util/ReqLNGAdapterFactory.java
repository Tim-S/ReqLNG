/**
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.reqLNG.util;

import de.schneidertim.requirements.nlp.reqLNG.Actor;
import de.schneidertim.requirements.nlp.reqLNG.ActorInteraction;
import de.schneidertim.requirements.nlp.reqLNG.ConceptCombination;
import de.schneidertim.requirements.nlp.reqLNG.ConceptOrSynonym;
import de.schneidertim.requirements.nlp.reqLNG.ConditionalRequirement;
import de.schneidertim.requirements.nlp.reqLNG.Description;
import de.schneidertim.requirements.nlp.reqLNG.DomainObject;
import de.schneidertim.requirements.nlp.reqLNG.Entities;
import de.schneidertim.requirements.nlp.reqLNG.Function;
import de.schneidertim.requirements.nlp.reqLNG.Glossary;
import de.schneidertim.requirements.nlp.reqLNG.Precondition;
import de.schneidertim.requirements.nlp.reqLNG.ReferenceCombination;
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage;
import de.schneidertim.requirements.nlp.reqLNG.Requirement;
import de.schneidertim.requirements.nlp.reqLNG.RequirementEnd;
import de.schneidertim.requirements.nlp.reqLNG.SentenceWithReferences;
import de.schneidertim.requirements.nlp.reqLNG.TextWithConceptsOrSynonyms;
import de.schneidertim.requirements.nlp.reqLNG.TextWithReferences;
import de.schneidertim.requirements.nlp.reqLNG.UnconditionalRequirement;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage
 * @generated
 */
public class ReqLNGAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ReqLNGPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqLNGAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ReqLNGPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReqLNGSwitch<Adapter> modelSwitch =
    new ReqLNGSwitch<Adapter>()
    {
      @Override
      public Adapter caseEntities(Entities object)
      {
        return createEntitiesAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter caseSystem(de.schneidertim.requirements.nlp.reqLNG.System object)
      {
        return createSystemAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseSentenceWithReferences(SentenceWithReferences object)
      {
        return createSentenceWithReferencesAdapter();
      }
      @Override
      public Adapter caseTextWithReferences(TextWithReferences object)
      {
        return createTextWithReferencesAdapter();
      }
      @Override
      public Adapter caseReferenceCombination(ReferenceCombination object)
      {
        return createReferenceCombinationAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseConditionalRequirement(ConditionalRequirement object)
      {
        return createConditionalRequirementAdapter();
      }
      @Override
      public Adapter caseUnconditionalRequirement(UnconditionalRequirement object)
      {
        return createUnconditionalRequirementAdapter();
      }
      @Override
      public Adapter casePrecondition(Precondition object)
      {
        return createPreconditionAdapter();
      }
      @Override
      public Adapter caseActorInteraction(ActorInteraction object)
      {
        return createActorInteractionAdapter();
      }
      @Override
      public Adapter caseRequirementEnd(RequirementEnd object)
      {
        return createRequirementEndAdapter();
      }
      @Override
      public Adapter caseTextWithConceptsOrSynonyms(TextWithConceptsOrSynonyms object)
      {
        return createTextWithConceptsOrSynonymsAdapter();
      }
      @Override
      public Adapter caseConceptCombination(ConceptCombination object)
      {
        return createConceptCombinationAdapter();
      }
      @Override
      public Adapter caseGlossary(Glossary object)
      {
        return createGlossaryAdapter();
      }
      @Override
      public Adapter caseConceptOrSynonym(ConceptOrSynonym object)
      {
        return createConceptOrSynonymAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseDomainObject(DomainObject object)
      {
        return createDomainObjectAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Entities <em>Entities</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Entities
   * @generated
   */
  public Adapter createEntitiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.System <em>System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.System
   * @generated
   */
  public Adapter createSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.SentenceWithReferences <em>Sentence With References</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.SentenceWithReferences
   * @generated
   */
  public Adapter createSentenceWithReferencesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.TextWithReferences <em>Text With References</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.TextWithReferences
   * @generated
   */
  public Adapter createTextWithReferencesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.ReferenceCombination <em>Reference Combination</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.ReferenceCombination
   * @generated
   */
  public Adapter createReferenceCombinationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.ConditionalRequirement <em>Conditional Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.ConditionalRequirement
   * @generated
   */
  public Adapter createConditionalRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.UnconditionalRequirement <em>Unconditional Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.UnconditionalRequirement
   * @generated
   */
  public Adapter createUnconditionalRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Precondition <em>Precondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Precondition
   * @generated
   */
  public Adapter createPreconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.ActorInteraction <em>Actor Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.ActorInteraction
   * @generated
   */
  public Adapter createActorInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.RequirementEnd <em>Requirement End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.RequirementEnd
   * @generated
   */
  public Adapter createRequirementEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.TextWithConceptsOrSynonyms <em>Text With Concepts Or Synonyms</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.TextWithConceptsOrSynonyms
   * @generated
   */
  public Adapter createTextWithConceptsOrSynonymsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.ConceptCombination <em>Concept Combination</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.ConceptCombination
   * @generated
   */
  public Adapter createConceptCombinationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Glossary <em>Glossary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Glossary
   * @generated
   */
  public Adapter createGlossaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.ConceptOrSynonym <em>Concept Or Synonym</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.ConceptOrSynonym
   * @generated
   */
  public Adapter createConceptOrSynonymAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.schneidertim.requirements.nlp.reqLNG.DomainObject <em>Domain Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.schneidertim.requirements.nlp.reqLNG.DomainObject
   * @generated
   */
  public Adapter createDomainObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ReqLNGAdapterFactory
