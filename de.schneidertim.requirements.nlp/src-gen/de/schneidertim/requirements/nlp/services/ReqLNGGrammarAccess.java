/*
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReqLNGGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RequirementDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.RequirementDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEntitiesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0_0 = (RuleCall)cEntitiesAssignment_0_0.eContents().get(0);
		private final Assignment cRequirementAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cRequirementRequirementParserRuleCall_0_1_0 = (RuleCall)cRequirementAssignment_0_1.eContents().get(0);
		private final Assignment cGlossaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlossaryGlossaryParserRuleCall_1_0 = (RuleCall)cGlossaryAssignment_1.eContents().get(0);
		
		//// Initial Rule:
		//RequirementDocument:
		//	(entities+=Entity | requirement+=Requirement)* glossary=Glossary;
		@Override public ParserRule getRule() { return rule; }
		
		//(entities+=Entity | requirement+=Requirement)* glossary=Glossary
		public Group getGroup() { return cGroup; }
		
		//(entities+=Entity | requirement+=Requirement)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//entities+=Entity
		public Assignment getEntitiesAssignment_0_0() { return cEntitiesAssignment_0_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0_0() { return cEntitiesEntityParserRuleCall_0_0_0; }
		
		//requirement+=Requirement
		public Assignment getRequirementAssignment_0_1() { return cRequirementAssignment_0_1; }
		
		//Requirement
		public RuleCall getRequirementRequirementParserRuleCall_0_1_0() { return cRequirementRequirementParserRuleCall_0_1_0; }
		
		//glossary=Glossary
		public Assignment getGlossaryAssignment_1() { return cGlossaryAssignment_1; }
		
		//Glossary
		public RuleCall getGlossaryGlossaryParserRuleCall_1_0() { return cGlossaryGlossaryParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// For defining Actors and Systems 
		//Entity:
		//	Actor | System;
		@Override public ParserRule getRule() { return rule; }
		
		//Actor | System
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Actor
		public RuleCall getActorParserRuleCall_0() { return cActorParserRuleCall_0; }
		
		//System
		public RuleCall getSystemParserRuleCall_1() { return cSystemParserRuleCall_1; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDescriptionParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//Actor:
		//	'Actor' ':' name=Text description=Description;
		@Override public ParserRule getRule() { return rule; }
		
		//'Actor' ':' name=Text description=Description
		public Group getGroup() { return cGroup; }
		
		//'Actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }
		
		//description=Description
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_3_0() { return cDescriptionDescriptionParserRuleCall_3_0; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDescriptionParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//System:
		//	'System' ':' name=Text description=Description;
		@Override public ParserRule getRule() { return rule; }
		
		//'System' ':' name=Text description=Description
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }
		
		//description=Description
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_3_0() { return cDescriptionDescriptionParserRuleCall_3_0; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSentenceWithReferencesParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//Description:
		//	'Description' ':' text+=SentenceWithReferences+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Description' ':' text+=SentenceWithReferences+
		public Group getGroup() { return cGroup; }
		
		//'Description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//text+=SentenceWithReferences+
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//SentenceWithReferences
		public RuleCall getTextSentenceWithReferencesParserRuleCall_2_0() { return cTextSentenceWithReferencesParserRuleCall_2_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTheKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTheKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final RuleCall cWORDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Text:
		//	('To' | 'to' | 'A' | 'a' | 'the' | 'The' | WORD | ANY_OTHER)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('To' | 'to' | 'A' | 'a' | 'the' | 'The' | WORD | ANY_OTHER)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'To'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'A'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//'the'
		public Keyword getTheKeyword_4() { return cTheKeyword_4; }
		
		//'The'
		public Keyword getTheKeyword_5() { return cTheKeyword_5; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_6() { return cWORDTerminalRuleCall_6; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_7() { return cANY_OTHERTerminalRuleCall_7; }
	}
	public class SentenceWithReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.SentenceWithReferences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextWithReferencesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextWithReferencesTextWithReferencesParserRuleCall_0_0 = (RuleCall)cTextWithReferencesAssignment_0.eContents().get(0);
		private final Assignment cPunctuationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPunctuationAlternatives_1_0 = (Alternatives)cPunctuationAssignment_1.eContents().get(0);
		private final Keyword cPunctuationFullStopKeyword_1_0_0 = (Keyword)cPunctuationAlternatives_1_0.eContents().get(0);
		private final Keyword cPunctuationExclamationMarkKeyword_1_0_1 = (Keyword)cPunctuationAlternatives_1_0.eContents().get(1);
		private final Keyword cPunctuationQuestionMarkKeyword_1_0_2 = (Keyword)cPunctuationAlternatives_1_0.eContents().get(2);
		
		//SentenceWithReferences:
		//	textWithReferences=TextWithReferences punctuation=('.' | '!' | '?');
		@Override public ParserRule getRule() { return rule; }
		
		//textWithReferences=TextWithReferences punctuation=('.' | '!' | '?')
		public Group getGroup() { return cGroup; }
		
		//textWithReferences=TextWithReferences
		public Assignment getTextWithReferencesAssignment_0() { return cTextWithReferencesAssignment_0; }
		
		//TextWithReferences
		public RuleCall getTextWithReferencesTextWithReferencesParserRuleCall_0_0() { return cTextWithReferencesTextWithReferencesParserRuleCall_0_0; }
		
		//punctuation=('.' | '!' | '?')
		public Assignment getPunctuationAssignment_1() { return cPunctuationAssignment_1; }
		
		//('.' | '!' | '?')
		public Alternatives getPunctuationAlternatives_1_0() { return cPunctuationAlternatives_1_0; }
		
		//'.'
		public Keyword getPunctuationFullStopKeyword_1_0_0() { return cPunctuationFullStopKeyword_1_0_0; }
		
		//'!'
		public Keyword getPunctuationExclamationMarkKeyword_1_0_1() { return cPunctuationExclamationMarkKeyword_1_0_1; }
		
		//'?'
		public Keyword getPunctuationQuestionMarkKeyword_1_0_2() { return cPunctuationQuestionMarkKeyword_1_0_2; }
	}
	public class TextWithReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.TextWithReferences");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOnlyRefsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOnlyRefsEntityCrossReference_0_0 = (CrossReference)cOnlyRefsAssignment_0.eContents().get(0);
		private final RuleCall cOnlyRefsEntitySTRINGTerminalRuleCall_0_0_1 = (RuleCall)cOnlyRefsEntityCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefBeforeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRefBeforeEntityCrossReference_1_0_0 = (CrossReference)cRefBeforeAssignment_1_0.eContents().get(0);
		private final RuleCall cRefBeforeEntitySTRINGTerminalRuleCall_1_0_0_1 = (RuleCall)cRefBeforeEntityCrossReference_1_0_0.eContents().get(1);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		private final Assignment cAfterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAfterReferenceCombinationParserRuleCall_1_2_0 = (RuleCall)cAfterAssignment_1_2.eContents().get(0);
		private final Assignment cFinalRefAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cFinalRefEntityCrossReference_1_3_0 = (CrossReference)cFinalRefAssignment_1_3.eContents().get(0);
		private final RuleCall cFinalRefEntitySTRINGTerminalRuleCall_1_3_0_1 = (RuleCall)cFinalRefEntityCrossReference_1_3_0.eContents().get(1);
		
		//TextWithReferences:
		//	onlyRefs+=[Entity|STRING]+ | refBefore+=[Entity|STRING]* text+=Text after+=ReferenceCombination*
		//	finalRef+=[Entity|STRING]*;
		@Override public ParserRule getRule() { return rule; }
		
		//onlyRefs+=[Entity|STRING]+ | refBefore+=[Entity|STRING]* text+=Text after+=ReferenceCombination*
		//finalRef+=[Entity|STRING]*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//onlyRefs+=[Entity|STRING]+
		public Assignment getOnlyRefsAssignment_0() { return cOnlyRefsAssignment_0; }
		
		//[Entity|STRING]
		public CrossReference getOnlyRefsEntityCrossReference_0_0() { return cOnlyRefsEntityCrossReference_0_0; }
		
		//STRING
		public RuleCall getOnlyRefsEntitySTRINGTerminalRuleCall_0_0_1() { return cOnlyRefsEntitySTRINGTerminalRuleCall_0_0_1; }
		
		//refBefore+=[Entity|STRING]* text+=Text after+=ReferenceCombination* finalRef+=[Entity|STRING]*
		public Group getGroup_1() { return cGroup_1; }
		
		//refBefore+=[Entity|STRING]*
		public Assignment getRefBeforeAssignment_1_0() { return cRefBeforeAssignment_1_0; }
		
		//[Entity|STRING]
		public CrossReference getRefBeforeEntityCrossReference_1_0_0() { return cRefBeforeEntityCrossReference_1_0_0; }
		
		//STRING
		public RuleCall getRefBeforeEntitySTRINGTerminalRuleCall_1_0_0_1() { return cRefBeforeEntitySTRINGTerminalRuleCall_1_0_0_1; }
		
		//text+=Text
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_1_0() { return cTextTextParserRuleCall_1_1_0; }
		
		//after+=ReferenceCombination*
		public Assignment getAfterAssignment_1_2() { return cAfterAssignment_1_2; }
		
		//ReferenceCombination
		public RuleCall getAfterReferenceCombinationParserRuleCall_1_2_0() { return cAfterReferenceCombinationParserRuleCall_1_2_0; }
		
		//finalRef+=[Entity|STRING]*
		public Assignment getFinalRefAssignment_1_3() { return cFinalRefAssignment_1_3; }
		
		//[Entity|STRING]
		public CrossReference getFinalRefEntityCrossReference_1_3_0() { return cFinalRefEntityCrossReference_1_3_0; }
		
		//STRING
		public RuleCall getFinalRefEntitySTRINGTerminalRuleCall_1_3_0_1() { return cFinalRefEntitySTRINGTerminalRuleCall_1_3_0_1; }
	}
	public class ReferenceCombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.ReferenceCombination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefsEntityCrossReference_0_0 = (CrossReference)cRefsAssignment_0.eContents().get(0);
		private final RuleCall cRefsEntitySTRINGTerminalRuleCall_0_0_1 = (RuleCall)cRefsEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//ReferenceCombination:
		//	refs+=[Entity|STRING]+ text+=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//refs+=[Entity|STRING]+ text+=Text
		public Group getGroup() { return cGroup; }
		
		//refs+=[Entity|STRING]+
		public Assignment getRefsAssignment_0() { return cRefsAssignment_0; }
		
		//[Entity|STRING]
		public CrossReference getRefsEntityCrossReference_0_0() { return cRefsEntityCrossReference_0_0; }
		
		//STRING
		public RuleCall getRefsEntitySTRINGTerminalRuleCall_0_0_1() { return cRefsEntitySTRINGTerminalRuleCall_0_0_1; }
		
		//text+=Text
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_0() { return cTextTextParserRuleCall_1_0; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Requirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalRequirementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnconditionalRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// For defining Requirements 
		//// Use your defined boilerplate here:
		////(this one is similar to https://requirementstechniques.wordpress.com/documentation/requirements-templates/)
		//Requirement:
		//	ConditionalRequirement | UnconditionalRequirement;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalRequirement | UnconditionalRequirement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalRequirement
		public RuleCall getConditionalRequirementParserRuleCall_0() { return cConditionalRequirementParserRuleCall_0; }
		
		//UnconditionalRequirement
		public RuleCall getUnconditionalRequirementParserRuleCall_1() { return cUnconditionalRequirementParserRuleCall_1; }
	}
	public class ConditionalRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.ConditionalRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionPreconditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSystemSystemCrossReference_1_0 = (CrossReference)cSystemAssignment_1.eContents().get(0);
		private final RuleCall cSystemSystemSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cSystemSystemCrossReference_1_0.eContents().get(1);
		private final Assignment cLiabilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiabilityLiabilityEnumRuleCall_2_0 = (RuleCall)cLiabilityAssignment_2.eContents().get(0);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndRequirementEndParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//ConditionalRequirement:
		//	condition=Precondition? system=[System|STRING] liability=Liability end=RequirementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Precondition? system=[System|STRING] liability=Liability end=RequirementEnd
		public Group getGroup() { return cGroup; }
		
		//condition=Precondition?
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Precondition
		public RuleCall getConditionPreconditionParserRuleCall_0_0() { return cConditionPreconditionParserRuleCall_0_0; }
		
		//system=[System|STRING]
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }
		
		//[System|STRING]
		public CrossReference getSystemSystemCrossReference_1_0() { return cSystemSystemCrossReference_1_0; }
		
		//STRING
		public RuleCall getSystemSystemSTRINGTerminalRuleCall_1_0_1() { return cSystemSystemSTRINGTerminalRuleCall_1_0_1; }
		
		//liability=Liability
		public Assignment getLiabilityAssignment_2() { return cLiabilityAssignment_2; }
		
		//Liability
		public RuleCall getLiabilityLiabilityEnumRuleCall_2_0() { return cLiabilityLiabilityEnumRuleCall_2_0; }
		
		//end=RequirementEnd
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }
		
		//RequirementEnd
		public RuleCall getEndRequirementEndParserRuleCall_3_0() { return cEndRequirementEndParserRuleCall_3_0; }
	}
	public class UnconditionalRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.UnconditionalRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTheTheKeyword_0_0 = (Keyword)cTheAssignment_0.eContents().get(0);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSystemSystemCrossReference_1_0 = (CrossReference)cSystemAssignment_1.eContents().get(0);
		private final RuleCall cSystemSystemSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cSystemSystemCrossReference_1_0.eContents().get(1);
		private final Assignment cLiabilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiabilityLiabilityEnumRuleCall_2_0 = (RuleCall)cLiabilityAssignment_2.eContents().get(0);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndRequirementEndParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//UnconditionalRequirement:
		//	the='The' system=[System|STRING] liability=Liability end=RequirementEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//the='The' system=[System|STRING] liability=Liability end=RequirementEnd
		public Group getGroup() { return cGroup; }
		
		//the='The'
		public Assignment getTheAssignment_0() { return cTheAssignment_0; }
		
		//'The'
		public Keyword getTheTheKeyword_0_0() { return cTheTheKeyword_0_0; }
		
		//system=[System|STRING]
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }
		
		//[System|STRING]
		public CrossReference getSystemSystemCrossReference_1_0() { return cSystemSystemCrossReference_1_0; }
		
		//STRING
		public RuleCall getSystemSystemSTRINGTerminalRuleCall_1_0_1() { return cSystemSystemSTRINGTerminalRuleCall_1_0_1; }
		
		//liability=Liability
		public Assignment getLiabilityAssignment_2() { return cLiabilityAssignment_2; }
		
		//Liability
		public RuleCall getLiabilityLiabilityEnumRuleCall_2_0() { return cLiabilityLiabilityEnumRuleCall_2_0; }
		
		//end=RequirementEnd
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }
		
		//RequirementEnd
		public RuleCall getEndRequirementEndParserRuleCall_3_0() { return cEndRequirementEndParserRuleCall_3_0; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionalConditionalParserRuleCall_0_0 = (RuleCall)cConditionalAssignment_0.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionTextWithReferencesParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//Precondition:
		//	conditional=Conditional condition=TextWithReferences;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional=Conditional condition=TextWithReferences
		public Group getGroup() { return cGroup; }
		
		//conditional=Conditional
		public Assignment getConditionalAssignment_0() { return cConditionalAssignment_0; }
		
		//Conditional
		public RuleCall getConditionalConditionalParserRuleCall_0_0() { return cConditionalConditionalParserRuleCall_0_0; }
		
		//condition=TextWithReferences
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//TextWithReferences
		public RuleCall getConditionTextWithReferencesParserRuleCall_1_0() { return cConditionTextWithReferencesParserRuleCall_1_0; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Conditional");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		//Conditional:
		//	"If";
		@Override public ParserRule getRule() { return rule; }
		
		//"If"
		public Keyword getIfKeyword() { return cIfKeyword; }
	}
	public class ActorInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.ActorInteraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProvideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProvideProvideKeyword_0_0 = (Keyword)cProvideAssignment_0.eContents().get(0);
		private final Assignment cThe1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cThe1TheKeyword_1_0 = (Keyword)cThe1Assignment_1.eContents().get(0);
		private final Assignment cActorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActorActorCrossReference_2_0 = (CrossReference)cActorAssignment_2.eContents().get(0);
		private final RuleCall cActorActorSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cActorActorCrossReference_2_0.eContents().get(1);
		private final Assignment cWithAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cWithWithKeyword_3_0 = (Keyword)cWithAssignment_3.eContents().get(0);
		private final Assignment cThe2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cThe2TheKeyword_4_0 = (Keyword)cThe2Assignment_4.eContents().get(0);
		private final Assignment cAbilityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cAbilityAbilityKeyword_5_0 = (Keyword)cAbilityAssignment_5.eContents().get(0);
		private final Assignment cToAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cToToKeyword_6_0 = (Keyword)cToAssignment_6.eContents().get(0);
		
		//ActorInteraction:
		//	provide='provide' the1='the'? actor=[Actor|STRING] ^with='with' the2='the' ability='ability' to='to';
		@Override public ParserRule getRule() { return rule; }
		
		//provide='provide' the1='the'? actor=[Actor|STRING] ^with='with' the2='the' ability='ability' to='to'
		public Group getGroup() { return cGroup; }
		
		//provide='provide'
		public Assignment getProvideAssignment_0() { return cProvideAssignment_0; }
		
		//'provide'
		public Keyword getProvideProvideKeyword_0_0() { return cProvideProvideKeyword_0_0; }
		
		//the1='the'?
		public Assignment getThe1Assignment_1() { return cThe1Assignment_1; }
		
		//'the'
		public Keyword getThe1TheKeyword_1_0() { return cThe1TheKeyword_1_0; }
		
		//actor=[Actor|STRING]
		public Assignment getActorAssignment_2() { return cActorAssignment_2; }
		
		//[Actor|STRING]
		public CrossReference getActorActorCrossReference_2_0() { return cActorActorCrossReference_2_0; }
		
		//STRING
		public RuleCall getActorActorSTRINGTerminalRuleCall_2_0_1() { return cActorActorSTRINGTerminalRuleCall_2_0_1; }
		
		//^with='with'
		public Assignment getWithAssignment_3() { return cWithAssignment_3; }
		
		//'with'
		public Keyword getWithWithKeyword_3_0() { return cWithWithKeyword_3_0; }
		
		//the2='the'
		public Assignment getThe2Assignment_4() { return cThe2Assignment_4; }
		
		//'the'
		public Keyword getThe2TheKeyword_4_0() { return cThe2TheKeyword_4_0; }
		
		//ability='ability'
		public Assignment getAbilityAssignment_5() { return cAbilityAssignment_5; }
		
		//'ability'
		public Keyword getAbilityAbilityKeyword_5_0() { return cAbilityAbilityKeyword_5_0; }
		
		//to='to'
		public Assignment getToAssignment_6() { return cToAssignment_6; }
		
		//'to'
		public Keyword getToToKeyword_6_0() { return cToToKeyword_6_0; }
	}
	public class RequirementEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.RequirementEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAiAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAiActorInteractionParserRuleCall_0_0 = (RuleCall)cAiAssignment_0.eContents().get(0);
		private final Assignment cObjectWithDetailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectWithDetailsTextWithConceptsOrSynonymsParserRuleCall_1_0 = (RuleCall)cObjectWithDetailsAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RequirementEnd:
		//	ai=ActorInteraction? objectWithDetails=TextWithConceptsOrSynonyms '.';
		@Override public ParserRule getRule() { return rule; }
		
		//ai=ActorInteraction? objectWithDetails=TextWithConceptsOrSynonyms '.'
		public Group getGroup() { return cGroup; }
		
		//ai=ActorInteraction?
		public Assignment getAiAssignment_0() { return cAiAssignment_0; }
		
		//ActorInteraction
		public RuleCall getAiActorInteractionParserRuleCall_0_0() { return cAiActorInteractionParserRuleCall_0_0; }
		
		//objectWithDetails=TextWithConceptsOrSynonyms
		public Assignment getObjectWithDetailsAssignment_1() { return cObjectWithDetailsAssignment_1; }
		
		//TextWithConceptsOrSynonyms
		public RuleCall getObjectWithDetailsTextWithConceptsOrSynonymsParserRuleCall_1_0() { return cObjectWithDetailsTextWithConceptsOrSynonymsParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}
	public class TextWithConceptsOrSynonymsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.TextWithConceptsOrSynonyms");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOnlyRefsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOnlyRefsConceptOrSynonymCrossReference_0_0 = (CrossReference)cOnlyRefsAssignment_0.eContents().get(0);
		private final RuleCall cOnlyRefsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cOnlyRefsConceptOrSynonymCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefBeforeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRefBeforeConceptOrSynonymCrossReference_1_0_0 = (CrossReference)cRefBeforeAssignment_1_0.eContents().get(0);
		private final RuleCall cRefBeforeConceptOrSynonymSTRINGTerminalRuleCall_1_0_0_1 = (RuleCall)cRefBeforeConceptOrSynonymCrossReference_1_0_0.eContents().get(1);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		private final Assignment cAfterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAfterConceptCombinationParserRuleCall_1_2_0 = (RuleCall)cAfterAssignment_1_2.eContents().get(0);
		private final Assignment cFinalRefAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cFinalRefConceptOrSynonymCrossReference_1_3_0 = (CrossReference)cFinalRefAssignment_1_3.eContents().get(0);
		private final RuleCall cFinalRefConceptOrSynonymSTRINGTerminalRuleCall_1_3_0_1 = (RuleCall)cFinalRefConceptOrSynonymCrossReference_1_3_0.eContents().get(1);
		
		//TextWithConceptsOrSynonyms:
		//	onlyRefs+=[ConceptOrSynonym|STRING]+
		//	| refBefore+=[ConceptOrSynonym|STRING]* text+=Text after+=ConceptCombination* finalRef+=[ConceptOrSynonym|STRING]*;
		@Override public ParserRule getRule() { return rule; }
		
		//onlyRefs+=[ConceptOrSynonym|STRING]+ | refBefore+=[ConceptOrSynonym|STRING]* text+=Text after+=ConceptCombination*
		//finalRef+=[ConceptOrSynonym|STRING]*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//onlyRefs+=[ConceptOrSynonym|STRING]+
		public Assignment getOnlyRefsAssignment_0() { return cOnlyRefsAssignment_0; }
		
		//[ConceptOrSynonym|STRING]
		public CrossReference getOnlyRefsConceptOrSynonymCrossReference_0_0() { return cOnlyRefsConceptOrSynonymCrossReference_0_0; }
		
		//STRING
		public RuleCall getOnlyRefsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1() { return cOnlyRefsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1; }
		
		//refBefore+=[ConceptOrSynonym|STRING]* text+=Text after+=ConceptCombination* finalRef+=[ConceptOrSynonym|STRING]*
		public Group getGroup_1() { return cGroup_1; }
		
		//refBefore+=[ConceptOrSynonym|STRING]*
		public Assignment getRefBeforeAssignment_1_0() { return cRefBeforeAssignment_1_0; }
		
		//[ConceptOrSynonym|STRING]
		public CrossReference getRefBeforeConceptOrSynonymCrossReference_1_0_0() { return cRefBeforeConceptOrSynonymCrossReference_1_0_0; }
		
		//STRING
		public RuleCall getRefBeforeConceptOrSynonymSTRINGTerminalRuleCall_1_0_0_1() { return cRefBeforeConceptOrSynonymSTRINGTerminalRuleCall_1_0_0_1; }
		
		//text+=Text
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_1_0() { return cTextTextParserRuleCall_1_1_0; }
		
		//after+=ConceptCombination*
		public Assignment getAfterAssignment_1_2() { return cAfterAssignment_1_2; }
		
		//ConceptCombination
		public RuleCall getAfterConceptCombinationParserRuleCall_1_2_0() { return cAfterConceptCombinationParserRuleCall_1_2_0; }
		
		//finalRef+=[ConceptOrSynonym|STRING]*
		public Assignment getFinalRefAssignment_1_3() { return cFinalRefAssignment_1_3; }
		
		//[ConceptOrSynonym|STRING]
		public CrossReference getFinalRefConceptOrSynonymCrossReference_1_3_0() { return cFinalRefConceptOrSynonymCrossReference_1_3_0; }
		
		//STRING
		public RuleCall getFinalRefConceptOrSynonymSTRINGTerminalRuleCall_1_3_0_1() { return cFinalRefConceptOrSynonymSTRINGTerminalRuleCall_1_3_0_1; }
	}
	public class ConceptCombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.ConceptCombination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptsConceptOrSynonymCrossReference_0_0 = (CrossReference)cConceptsAssignment_0.eContents().get(0);
		private final RuleCall cConceptsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cConceptsConceptOrSynonymCrossReference_0_0.eContents().get(1);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//ConceptCombination:
		//	concepts+=[ConceptOrSynonym|STRING]+ text+=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//concepts+=[ConceptOrSynonym|STRING]+ text+=Text
		public Group getGroup() { return cGroup; }
		
		//concepts+=[ConceptOrSynonym|STRING]+
		public Assignment getConceptsAssignment_0() { return cConceptsAssignment_0; }
		
		//[ConceptOrSynonym|STRING]
		public CrossReference getConceptsConceptOrSynonymCrossReference_0_0() { return cConceptsConceptOrSynonymCrossReference_0_0; }
		
		//STRING
		public RuleCall getConceptsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1() { return cConceptsConceptOrSynonymSTRINGTerminalRuleCall_0_0_1; }
		
		//text+=Text
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_0() { return cTextTextParserRuleCall_1_0; }
	}
	public class GlossaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Glossary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlossaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlossaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConceptsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptsConceptParserRuleCall_2_0 = (RuleCall)cConceptsAssignment_2.eContents().get(0);
		
		//// For creating a Glossary with Concepts and Functions    
		//Glossary:
		//	{Glossary} 'Glossary' concepts+=Concept*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Glossary} 'Glossary' concepts+=Concept*
		public Group getGroup() { return cGroup; }
		
		//{Glossary}
		public Action getGlossaryAction_0() { return cGlossaryAction_0; }
		
		//'Glossary'
		public Keyword getGlossaryKeyword_1() { return cGlossaryKeyword_1; }
		
		//concepts+=Concept*
		public Assignment getConceptsAssignment_2() { return cConceptsAssignment_2; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_2_0() { return cConceptsConceptParserRuleCall_2_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Concept ConceptOrSynonym:
		//	Function | DomainObject
		@Override public ParserRule getRule() { return rule; }
		
		//Function | DomainObject
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//DomainObject
		public RuleCall getDomainObjectParserRuleCall_1() { return cDomainObjectParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSynonymsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSynonymsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSynonymsFunctionSynonymParserRuleCall_3_2_0 = (RuleCall)cSynonymsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSynonymsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cSynonymsFunctionSynonymParserRuleCall_3_3_1_0 = (RuleCall)cSynonymsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDescriptionSentenceWithReferencesParserRuleCall_4_2_0 = (RuleCall)cDescriptionAssignment_4_2.eContents().get(0);
		
		//Function:
		//	'Function' ':' name=Text ('Synonyms' ':' synonyms+=FunctionSynonym (',' synonyms+=FunctionSynonym)*)? ('Description'
		//	':' description+=SentenceWithReferences*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Function' ':' name=Text ('Synonyms' ':' synonyms+=FunctionSynonym (',' synonyms+=FunctionSynonym)*)? ('Description' ':'
		//description+=SentenceWithReferences*)?
		public Group getGroup() { return cGroup; }
		
		//'Function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }
		
		//('Synonyms' ':' synonyms+=FunctionSynonym (',' synonyms+=FunctionSynonym)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Synonyms'
		public Keyword getSynonymsKeyword_3_0() { return cSynonymsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//synonyms+=FunctionSynonym
		public Assignment getSynonymsAssignment_3_2() { return cSynonymsAssignment_3_2; }
		
		//FunctionSynonym
		public RuleCall getSynonymsFunctionSynonymParserRuleCall_3_2_0() { return cSynonymsFunctionSynonymParserRuleCall_3_2_0; }
		
		//(',' synonyms+=FunctionSynonym)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//synonyms+=FunctionSynonym
		public Assignment getSynonymsAssignment_3_3_1() { return cSynonymsAssignment_3_3_1; }
		
		//FunctionSynonym
		public RuleCall getSynonymsFunctionSynonymParserRuleCall_3_3_1_0() { return cSynonymsFunctionSynonymParserRuleCall_3_3_1_0; }
		
		//('Description' ':' description+=SentenceWithReferences*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Description'
		public Keyword getDescriptionKeyword_4_0() { return cDescriptionKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//description+=SentenceWithReferences*
		public Assignment getDescriptionAssignment_4_2() { return cDescriptionAssignment_4_2; }
		
		//SentenceWithReferences
		public RuleCall getDescriptionSentenceWithReferencesParserRuleCall_4_2_0() { return cDescriptionSentenceWithReferencesParserRuleCall_4_2_0; }
	}
	public class DomainObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.DomainObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTextParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSynonymsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSynonymsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSynonymsDomainObjectSynonymParserRuleCall_3_2_0 = (RuleCall)cSynonymsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSynonymsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cSynonymsDomainObjectSynonymParserRuleCall_3_3_1_0 = (RuleCall)cSynonymsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDescriptionSentenceWithReferencesParserRuleCall_4_2_0 = (RuleCall)cDescriptionAssignment_4_2.eContents().get(0);
		
		//DomainObject:
		//	'Object' ':' name=Text ('Synonyms' ':' synonyms+=DomainObjectSynonym (',' synonyms+=DomainObjectSynonym)*)?
		//	('Description' ':' description+=SentenceWithReferences+)?
		//	//('Properties' ':' properties+=Property (',' properties+=Property)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Object' ':' name=Text ('Synonyms' ':' synonyms+=DomainObjectSynonym (',' synonyms+=DomainObjectSynonym)*)?
		//('Description' ':' description+=SentenceWithReferences+)?
		public Group getGroup() { return cGroup; }
		
		//'Object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=Text
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_2_0() { return cNameTextParserRuleCall_2_0; }
		
		//('Synonyms' ':' synonyms+=DomainObjectSynonym (',' synonyms+=DomainObjectSynonym)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Synonyms'
		public Keyword getSynonymsKeyword_3_0() { return cSynonymsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//synonyms+=DomainObjectSynonym
		public Assignment getSynonymsAssignment_3_2() { return cSynonymsAssignment_3_2; }
		
		//DomainObjectSynonym
		public RuleCall getSynonymsDomainObjectSynonymParserRuleCall_3_2_0() { return cSynonymsDomainObjectSynonymParserRuleCall_3_2_0; }
		
		//(',' synonyms+=DomainObjectSynonym)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//synonyms+=DomainObjectSynonym
		public Assignment getSynonymsAssignment_3_3_1() { return cSynonymsAssignment_3_3_1; }
		
		//DomainObjectSynonym
		public RuleCall getSynonymsDomainObjectSynonymParserRuleCall_3_3_1_0() { return cSynonymsDomainObjectSynonymParserRuleCall_3_3_1_0; }
		
		//('Description' ':' description+=SentenceWithReferences+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Description'
		public Keyword getDescriptionKeyword_4_0() { return cDescriptionKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//description+=SentenceWithReferences+
		public Assignment getDescriptionAssignment_4_2() { return cDescriptionAssignment_4_2; }
		
		//SentenceWithReferences
		public RuleCall getDescriptionSentenceWithReferencesParserRuleCall_4_2_0() { return cDescriptionSentenceWithReferencesParserRuleCall_4_2_0; }
	}
	public class ConceptOrSynonymElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.ConceptOrSynonym");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionSynonymParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainObjectSynonymParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConceptOrSynonym:
		//	FunctionSynonym | DomainObjectSynonym;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionSynonym | DomainObjectSynonym
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionSynonym
		public RuleCall getFunctionSynonymParserRuleCall_0() { return cFunctionSynonymParserRuleCall_0; }
		
		//DomainObjectSynonym
		public RuleCall getDomainObjectSynonymParserRuleCall_1() { return cDomainObjectSynonymParserRuleCall_1; }
	}
	public class FunctionSynonymElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.FunctionSynonym");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionSynonym:
		//	name=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Text
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_0() { return cNameTextParserRuleCall_0; }
	}
	public class DomainObjectSynonymElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.DomainObjectSynonym");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DomainObjectSynonym:
		//	name=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Text
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Text
		public RuleCall getNameTextParserRuleCall_0() { return cNameTextParserRuleCall_0; }
	}
	
	public class LiabilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.Liability");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cShallEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cShallShallKeyword_0_0 = (Keyword)cShallEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cShouldEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cShouldShouldKeyword_1_0 = (Keyword)cShouldEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWillEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWillWillKeyword_2_0 = (Keyword)cWillEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Liability:
		//	shall | should | will;
		public EnumRule getRule() { return rule; }
		
		//shall | should | will
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//shall
		public EnumLiteralDeclaration getShallEnumLiteralDeclaration_0() { return cShallEnumLiteralDeclaration_0; }
		
		//"shall"
		public Keyword getShallShallKeyword_0_0() { return cShallShallKeyword_0_0; }
		
		//should
		public EnumLiteralDeclaration getShouldEnumLiteralDeclaration_1() { return cShouldEnumLiteralDeclaration_1; }
		
		//"should"
		public Keyword getShouldShouldKeyword_1_0() { return cShouldShouldKeyword_1_0; }
		
		//will
		public EnumLiteralDeclaration getWillEnumLiteralDeclaration_2() { return cWillEnumLiteralDeclaration_2; }
		
		//"will"
		public Keyword getWillWillKeyword_2_0() { return cWillWillKeyword_2_0; }
	}
	
	private final RequirementDocumentElements pRequirementDocument;
	private final EntityElements pEntity;
	private final ActorElements pActor;
	private final SystemElements pSystem;
	private final DescriptionElements pDescription;
	private final TextElements pText;
	private final SentenceWithReferencesElements pSentenceWithReferences;
	private final TextWithReferencesElements pTextWithReferences;
	private final ReferenceCombinationElements pReferenceCombination;
	private final RequirementElements pRequirement;
	private final ConditionalRequirementElements pConditionalRequirement;
	private final UnconditionalRequirementElements pUnconditionalRequirement;
	private final PreconditionElements pPrecondition;
	private final ConditionalElements pConditional;
	private final LiabilityElements eLiability;
	private final ActorInteractionElements pActorInteraction;
	private final RequirementEndElements pRequirementEnd;
	private final TextWithConceptsOrSynonymsElements pTextWithConceptsOrSynonyms;
	private final ConceptCombinationElements pConceptCombination;
	private final GlossaryElements pGlossary;
	private final ConceptElements pConcept;
	private final FunctionElements pFunction;
	private final DomainObjectElements pDomainObject;
	private final ConceptOrSynonymElements pConceptOrSynonym;
	private final FunctionSynonymElements pFunctionSynonym;
	private final DomainObjectSynonymElements pDomainObjectSynonym;
	private final TerminalRule tWORD;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqLNGGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRequirementDocument = new RequirementDocumentElements();
		this.pEntity = new EntityElements();
		this.pActor = new ActorElements();
		this.pSystem = new SystemElements();
		this.pDescription = new DescriptionElements();
		this.pText = new TextElements();
		this.pSentenceWithReferences = new SentenceWithReferencesElements();
		this.pTextWithReferences = new TextWithReferencesElements();
		this.pReferenceCombination = new ReferenceCombinationElements();
		this.pRequirement = new RequirementElements();
		this.pConditionalRequirement = new ConditionalRequirementElements();
		this.pUnconditionalRequirement = new UnconditionalRequirementElements();
		this.pPrecondition = new PreconditionElements();
		this.pConditional = new ConditionalElements();
		this.eLiability = new LiabilityElements();
		this.pActorInteraction = new ActorInteractionElements();
		this.pRequirementEnd = new RequirementEndElements();
		this.pTextWithConceptsOrSynonyms = new TextWithConceptsOrSynonymsElements();
		this.pConceptCombination = new ConceptCombinationElements();
		this.pGlossary = new GlossaryElements();
		this.pConcept = new ConceptElements();
		this.pFunction = new FunctionElements();
		this.pDomainObject = new DomainObjectElements();
		this.pConceptOrSynonym = new ConceptOrSynonymElements();
		this.pFunctionSynonym = new FunctionSynonymElements();
		this.pDomainObjectSynonym = new DomainObjectSynonymElements();
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.schneidertim.requirements.nlp.ReqLNG.WORD");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.schneidertim.requirements.nlp.ReqLNG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Initial Rule:
	//RequirementDocument:
	//	(entities+=Entity | requirement+=Requirement)* glossary=Glossary;
	public RequirementDocumentElements getRequirementDocumentAccess() {
		return pRequirementDocument;
	}
	
	public ParserRule getRequirementDocumentRule() {
		return getRequirementDocumentAccess().getRule();
	}
	
	//// For defining Actors and Systems 
	//Entity:
	//	Actor | System;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Actor:
	//	'Actor' ':' name=Text description=Description;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//System:
	//	'System' ':' name=Text description=Description;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Description:
	//	'Description' ':' text+=SentenceWithReferences+;
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//Text:
	//	('To' | 'to' | 'A' | 'a' | 'the' | 'The' | WORD | ANY_OTHER)+;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//SentenceWithReferences:
	//	textWithReferences=TextWithReferences punctuation=('.' | '!' | '?');
	public SentenceWithReferencesElements getSentenceWithReferencesAccess() {
		return pSentenceWithReferences;
	}
	
	public ParserRule getSentenceWithReferencesRule() {
		return getSentenceWithReferencesAccess().getRule();
	}
	
	//TextWithReferences:
	//	onlyRefs+=[Entity|STRING]+ | refBefore+=[Entity|STRING]* text+=Text after+=ReferenceCombination*
	//	finalRef+=[Entity|STRING]*;
	public TextWithReferencesElements getTextWithReferencesAccess() {
		return pTextWithReferences;
	}
	
	public ParserRule getTextWithReferencesRule() {
		return getTextWithReferencesAccess().getRule();
	}
	
	//ReferenceCombination:
	//	refs+=[Entity|STRING]+ text+=Text;
	public ReferenceCombinationElements getReferenceCombinationAccess() {
		return pReferenceCombination;
	}
	
	public ParserRule getReferenceCombinationRule() {
		return getReferenceCombinationAccess().getRule();
	}
	
	//// For defining Requirements 
	//// Use your defined boilerplate here:
	////(this one is similar to https://requirementstechniques.wordpress.com/documentation/requirements-templates/)
	//Requirement:
	//	ConditionalRequirement | UnconditionalRequirement;
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//ConditionalRequirement:
	//	condition=Precondition? system=[System|STRING] liability=Liability end=RequirementEnd;
	public ConditionalRequirementElements getConditionalRequirementAccess() {
		return pConditionalRequirement;
	}
	
	public ParserRule getConditionalRequirementRule() {
		return getConditionalRequirementAccess().getRule();
	}
	
	//UnconditionalRequirement:
	//	the='The' system=[System|STRING] liability=Liability end=RequirementEnd;
	public UnconditionalRequirementElements getUnconditionalRequirementAccess() {
		return pUnconditionalRequirement;
	}
	
	public ParserRule getUnconditionalRequirementRule() {
		return getUnconditionalRequirementAccess().getRule();
	}
	
	//Precondition:
	//	conditional=Conditional condition=TextWithReferences;
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Conditional:
	//	"If";
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//enum Liability:
	//	shall | should | will;
	public LiabilityElements getLiabilityAccess() {
		return eLiability;
	}
	
	public EnumRule getLiabilityRule() {
		return getLiabilityAccess().getRule();
	}
	
	//ActorInteraction:
	//	provide='provide' the1='the'? actor=[Actor|STRING] ^with='with' the2='the' ability='ability' to='to';
	public ActorInteractionElements getActorInteractionAccess() {
		return pActorInteraction;
	}
	
	public ParserRule getActorInteractionRule() {
		return getActorInteractionAccess().getRule();
	}
	
	//RequirementEnd:
	//	ai=ActorInteraction? objectWithDetails=TextWithConceptsOrSynonyms '.';
	public RequirementEndElements getRequirementEndAccess() {
		return pRequirementEnd;
	}
	
	public ParserRule getRequirementEndRule() {
		return getRequirementEndAccess().getRule();
	}
	
	//TextWithConceptsOrSynonyms:
	//	onlyRefs+=[ConceptOrSynonym|STRING]+
	//	| refBefore+=[ConceptOrSynonym|STRING]* text+=Text after+=ConceptCombination* finalRef+=[ConceptOrSynonym|STRING]*;
	public TextWithConceptsOrSynonymsElements getTextWithConceptsOrSynonymsAccess() {
		return pTextWithConceptsOrSynonyms;
	}
	
	public ParserRule getTextWithConceptsOrSynonymsRule() {
		return getTextWithConceptsOrSynonymsAccess().getRule();
	}
	
	//ConceptCombination:
	//	concepts+=[ConceptOrSynonym|STRING]+ text+=Text;
	public ConceptCombinationElements getConceptCombinationAccess() {
		return pConceptCombination;
	}
	
	public ParserRule getConceptCombinationRule() {
		return getConceptCombinationAccess().getRule();
	}
	
	//// For creating a Glossary with Concepts and Functions    
	//Glossary:
	//	{Glossary} 'Glossary' concepts+=Concept*;
	public GlossaryElements getGlossaryAccess() {
		return pGlossary;
	}
	
	public ParserRule getGlossaryRule() {
		return getGlossaryAccess().getRule();
	}
	
	//Concept ConceptOrSynonym:
	//	Function | DomainObject
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Function:
	//	'Function' ':' name=Text ('Synonyms' ':' synonyms+=FunctionSynonym (',' synonyms+=FunctionSynonym)*)? ('Description'
	//	':' description+=SentenceWithReferences*)?;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//DomainObject:
	//	'Object' ':' name=Text ('Synonyms' ':' synonyms+=DomainObjectSynonym (',' synonyms+=DomainObjectSynonym)*)?
	//	('Description' ':' description+=SentenceWithReferences+)?
	//	//('Properties' ':' properties+=Property (',' properties+=Property)*)?
	//;
	public DomainObjectElements getDomainObjectAccess() {
		return pDomainObject;
	}
	
	public ParserRule getDomainObjectRule() {
		return getDomainObjectAccess().getRule();
	}
	
	//ConceptOrSynonym:
	//	FunctionSynonym | DomainObjectSynonym;
	public ConceptOrSynonymElements getConceptOrSynonymAccess() {
		return pConceptOrSynonym;
	}
	
	public ParserRule getConceptOrSynonymRule() {
		return getConceptOrSynonymAccess().getRule();
	}
	
	//FunctionSynonym:
	//	name=Text;
	public FunctionSynonymElements getFunctionSynonymAccess() {
		return pFunctionSynonym;
	}
	
	public ParserRule getFunctionSynonymRule() {
		return getFunctionSynonymAccess().getRule();
	}
	
	//DomainObjectSynonym:
	//	name=Text;
	public DomainObjectSynonymElements getDomainObjectSynonymAccess() {
		return pDomainObjectSynonym;
	}
	
	public ParserRule getDomainObjectSynonymRule() {
		return getDomainObjectSynonymAccess().getRule();
	}
	
	//terminal WORD:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' | '_')+;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
