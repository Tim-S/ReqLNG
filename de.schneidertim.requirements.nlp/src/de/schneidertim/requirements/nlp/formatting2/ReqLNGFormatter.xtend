/*
 * generated by Xtext 2.10.0
 */
package de.schneidertim.requirements.nlp.formatting2

import com.google.inject.Inject
import de.schneidertim.requirements.nlp.reqLNG.Actor
import de.schneidertim.requirements.nlp.reqLNG.Entity
import de.schneidertim.requirements.nlp.reqLNG.ReqLNGPackage.Literals
import de.schneidertim.requirements.nlp.reqLNG.Requirement
import de.schneidertim.requirements.nlp.reqLNG.RequirementDocument
import de.schneidertim.requirements.nlp.services.ReqLNGGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ReqLNGFormatter extends AbstractFormatter2 {
	
	@Inject extension ReqLNGGrammarAccess

	def dispatch void format(RequirementDocument requirementDocument, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Entity entities : requirementDocument.getEntities()) {
			entities.format;
			entities.append[newLines = 2]
		}
		for (Requirement requirement : requirementDocument.getRequirement()) {
			requirement.format;
		}
		requirementDocument.getGlossary.format;
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		//actor.getDescription.format;
		entity.interior[indent]
		entity.regionFor.feature(Literals.ENTITY__NAME).append[newLine]
		//actor.regionFor.feature(Literals.ENTITY__DESCRIPTION).append[newLine]
	}
//	def dispatch void format(Function function, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		function
//			.regionFor
//			.feature(ReqLNGPackage.Literals.FUNCTION__SYNONYMS)
//			.prepend[indent]
//			.append[newLine]
//	}
	// TODO: implement for System, Description, SentenceWithReferences, TextWithReferences, ConditionalRequirement, UnconditionalRequirement, Precondition, RequirementEnd, TextWithConceptsOrSynonyms, Glossary, Function, DomainObject
}
